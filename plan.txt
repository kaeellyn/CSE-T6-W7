Overview
Greed is a game in which the player seeks to gather as many falling gems as possible. The game continues as long as the player wants more!

Rules
Greed is played according to the following rules:
- Gems (*) and rocks (o) randomly appear and fall from the top of the screen.
- The player (#) can move left or right along the bottom of the screen.
- If the player touches a gem they earn a point.
- If the player touches a rock they lose a point.
- Gems and rocks are removed when the player touches them.
- The game continues until the player closes the window.
- Interface


Requirements*
Your program must also meet the following requirements:

- The program must have a README file.
- The program must have at least eight classes.
- Each module, class and method must have a corresponding comment.
- The game must remain generally true to the order of play described earlier.

- Have Some Fun
- Make the game your own by enhancing it any way you like. Here are a few ideas.

Enhanced gems and rocks (multiple kinds, different points).
Enhanced player movement (up and down in a limited range)
Enhanced game play and game over messages.
Enhanced gem, rock and player representation (colors or better symbols)




How the files interact with one another:

--Main--

__main__.py:
    creates the cast of the robot and artifacts by calling the Gem, Rock, and Cast classes.
    uses Director to start the game loop, feeding it the cast.
    

--Directing--

director.py:
    Holds the gameplay loop, pieces together each part to make the game work.
    The gameplay loop consists of each frame checking for collision, moving the cast appropriately, and updating points.


--Services--

keyboard_service.py:
    Takes arrow key inputs to move the player character on the screen on command

video_service.py:
    Updates and shows the content of the screen, such as the score, and where each cast member is and what they look like.


--Shared--

color.py
    Is a class used by others to handle colors. Works primarily in RGB

point.py
    Is a class used by others to handle (x, y) points on a graph. Used to determine where on the screen a cast member is.
    
constants.py
    Is a class used by others to have universal variables that are able to be changed without breaking the program (as bad).
    

--Casting--
    
actor.py
    Is the base of the Gem and Rock classes, holds functions and variables that are necessary for a cast member. 
    Variables such as color, text content, velocity, size and position.

cast.py
    Handles large amounts of actors.

gem.py
    Inherits Actor from actor.py
    Provides a gem instance to be called by __main__. When the player collides with a gem they receive +1 score.
    Outputs to __main__.py


rock.py
    inherits Actor from actor.py
    Provides a rock instance to be called by __main__. When the player collides with a rock they receive -1 score.
    Outputs to __main__.py




An idea we didn't implement:
    
We could display a retro style visual indicator of our player being hurt by phasing it in and out on odd or even frames. 
    We could have a modulus_variable, and when the player is hurt say modulus_variable = frame_count % 2, 
    then using a boolean variable as a toggle, for 1 second - tracked by waiting for frame_count to return to itself - when frame_count % 2 = modulus_variable we could not display the player.


