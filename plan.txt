Overview
Greed is a game in which the player seeks to gather as many falling gems as possible. The game continues as long as the player wants more!

Rules
Greed is played according to the following rules:
- Gems (*) and rocks (o) randomly appear and fall from the top of the screen.
- The player (#) can move left or right along the bottom of the screen.
- If the player touches a gem they earn a point.
- If the player touches a rock they lose a point.
- Gems and rocks are removed when the player touches them.
- The game continues until the player closes the window.
- Interface


Requirements*
Your program must also meet the following requirements:

- The program must have a README file.
- The program must have at least eight classes.
- Each module, class and method must have a corresponding comment.
- The game must remain generally true to the order of play described earlier.

- Have Some Fun
- Make the game your own by enhancing it any way you like. Here are a few ideas.

Enhanced gems and rocks (multiple kinds, different points).
Enhanced player movement (up and down in a limited range)
Enhanced game play and game over messages.
Enhanced gem, rock and player representation (colors or better symbols)




How the files interact with one another:

--Main--

__main__.py:
    imports director
    create the cast, robot, artifacts by calling the classes
    uses director to start the game loop
    


--Directing--

director.py:
    imports ______
    Holds the gameplay loop, pieces together each part to make the game work.
    Outputs the gameplay loop to __main__.py



--Services--

keyboard_service.py:
    imports Pyray and class Point
    Takes arrow key inputs to move the player character on the screen
    Outputs to director, ---And others?---

video_service.py:
    imports Pyray
    Outputs the game state
    This is what files use this program
    


--Shared--

color.py
    imports ______
    This is what this does
    This is what files use this program

point.py
    imports ______
    This is what this does
    This is what files use this program



--Casting--
    
actor.py
    imports ______
    This is what this does
    This is what files use this program

cast.py
    imports ______
    This is what this does
    This is what files use this program

gem.py
    Inherits Actor from actor.py
    Provides a gem instance to be called by __main__. When the player runs into a gem they receive +1 score.
    Outputs to __main__.py


rock.py
    inherits Actor from actor.py
    Provides a rock instance to be called by __main__. When the player runs into a rock they receive -1 score, and flash for 1 second.
    Outputs to __main__.py




Unsorted ideas:

If we assume a frame rate of 12, we could set all of our actors to change their y position by 1 step going down every 8 or 12 frames using some logic. 
    Say frame_count = 0, every frame frame_count += 1, if frame_count >= 12 then make frame_count = 0 and all our actors step down one except our main character.
    
We could display a retro style visual indicator of our player being hurt by phasing it in and out on odd or even frames. 
    We could have a modulus_variable, and when the player is hurt say modulus_variable = frame_count % 2, 
    then using a boolean variable as a toggle, for 1 second - tracked by waiting for frame_count to return to itself - when frame_count % 2 = modulus_variable we could not display the player.


